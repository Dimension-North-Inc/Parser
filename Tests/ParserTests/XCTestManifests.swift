#if !canImport(ObjectiveC)
import XCTest

extension CombinatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CombinatorTests = [
        ("testItCanOptionallyIgnoreSignsWhenParsingIntegers", testItCanOptionallyIgnoreSignsWhenParsingIntegers),
        ("testItCanParseComplexPrefixes", testItCanParseComplexPrefixes),
        ("testItCanParseFloatingPointNumbersFromStrings", testItCanParseFloatingPointNumbersFromStrings),
        ("testItCanParseIntegersFromStrings", testItCanParseIntegersFromStrings),
        ("testItCanParseLiteralsWithoutWhitespacePrefixOrSuffix", testItCanParseLiteralsWithoutWhitespacePrefixOrSuffix),
        ("testItCanParseMultipleInstancesOfAnotherParser", testItCanParseMultipleInstancesOfAnotherParser),
        ("testItCanParseMultipleInstancesOfAnotherParserWithSeparators", testItCanParseMultipleInstancesOfAnotherParserWithSeparators),
        ("testItCanParseNonBase10IntegersFromString", testItCanParseNonBase10IntegersFromString),
        ("testItCanParseQuotedStringsWithArbitraryQuoteAndEscapeCharacters", testItCanParseQuotedStringsWithArbitraryQuoteAndEscapeCharacters),
        ("testItCanParseSimplePrefixes", testItCanParseSimplePrefixes),
        ("testItCanParseTheEndOfInput", testItCanParseTheEndOfInput),
        ("testItCanParseTheFirstOrSecondResultOfTwoParsers", testItCanParseTheFirstOrSecondResultOfTwoParsers),
        ("testItCanParseTheResultOfBothOfTwoParsers", testItCanParseTheResultOfBothOfTwoParsers),
        ("testItCanParseTheResultOfEitherOfTwoParsers", testItCanParseTheResultOfEitherOfTwoParsers),
        ("testItCanParseTokensWithWhitespacePrefixOrSuffix", testItCanParseTokensWithWhitespacePrefixOrSuffix),
        ("testItCanParseUpToThePointASecondParserSucceeds", testItCanParseUpToThePointASecondParserSucceeds),
        ("testItCanParseWhitespaceLettersAndNumbers", testItCanParseWhitespaceLettersAndNumbers),
        ("testItCanParseZeroOrOneInstanceOfAnotherParser", testItCanParseZeroOrOneInstanceOfAnotherParser),
        ("testItCanPurposefullyParseRegardlessOfInput", testItCanPurposefullyParseRegardlessOfInput),
        ("testItCanPurposefullyThrowRegardlessOfInput", testItCanPurposefullyThrowRegardlessOfInput),
        ("testItCanReduceTheResultOfParsedValuesFromLeftToRightWithPrecedence", testItCanReduceTheResultOfParsedValuesFromLeftToRightWithPrecedence),
        ("testItCanReduceTheResultsOfParsedValuesFromEitherTheRightOrTheLeft", testItCanReduceTheResultsOfParsedValuesFromEitherTheRightOrTheLeft),
        ("testItCanStripOuterQuotesAndEscapesForArbitraryQuoteAndEscapeCharacters", testItCanStripOuterQuotesAndEscapesForArbitraryQuoteAndEscapeCharacters),
    ]
}

extension ParserInputTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParserInputTests = [
        ("testItCanBeInitializedWithAParsableValue", testItCanBeInitializedWithAParsableValue),
        ("testItCanReportWhenItIsAtTheEndOfInput", testItCanReportWhenItIsAtTheEndOfInput),
        ("testItInitiallyPointsToTheBeginningOfItsInput", testItInitiallyPointsToTheBeginningOfItsInput),
        ("testItReturnsANewInputWhenMatchingAnUntilPrefix", testItReturnsANewInputWhenMatchingAnUntilPrefix),
        ("testItReturnsANewInputWhenMatchingAPrefix", testItReturnsANewInputWhenMatchingAPrefix),
        ("testItReturnsANewInputWhenMatchingAWhilePrefix", testItReturnsANewInputWhenMatchingAWhilePrefix),
        ("testItReturnsNilWhenNotMatchingAnUntilPrefix", testItReturnsNilWhenNotMatchingAnUntilPrefix),
        ("testItReturnsNilWhenNotMatchingAPrefix", testItReturnsNilWhenNotMatchingAPrefix),
        ("testItReturnsNilWhenNotMatchingAWhilePrefix", testItReturnsNilWhenNotMatchingAWhilePrefix),
    ]
}

extension ParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParserTests = [
        ("testItBubblesUpMeaningfulErrorsToTheTopLevel", testItBubblesUpMeaningfulErrorsToTheTopLevel),
        ("testItCanBeInitializedWithABodyFunction", testItCanBeInitializedWithABodyFunction),
        ("testItCanMapItsOutput", testItCanMapItsOutput),
        ("testItCanThrowCustomErrors", testItCanThrowCustomErrors),
        ("testItProducesOnMatch", testItProducesOnMatch),
        ("testItThrowsIfItCantMatch", testItThrowsIfItCantMatch),
    ]
}

extension TestParserOutput {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TestParserOutput = [
        ("testItCanMapItsResultValue", testItCanMapItsResultValue),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CombinatorTests.__allTests__CombinatorTests),
        testCase(ParserInputTests.__allTests__ParserInputTests),
        testCase(ParserTests.__allTests__ParserTests),
        testCase(TestParserOutput.__allTests__TestParserOutput),
    ]
}
#endif
